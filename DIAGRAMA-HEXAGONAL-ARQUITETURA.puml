@startuml DIAGRAMA-HEXAGONAL-ARQUITETURA
!theme plain
skinparam backgroundColor #FFFFFF
skinparam classBackgroundColor #F8F9FA
skinparam classBorderColor #343A40
skinparam packageBackgroundColor #E9ECEF
skinparam packageBorderColor #6C757D
skinparam noteBackgroundColor #FFF3CD
skinparam noteBorderColor #FFC107

title Arquitetura Hexagonal - Sistema de Usu√°rios\nDiagrama de Classes e Relacionamentos

' ==========================================
' HEX√ÅGONO CENTRAL - DOMAIN
' ==========================================
package "üéØ DOMAIN (Core Business Logic)" as domain #E8F5E8 {
    
    ' Entidade Principal
    class Usuario {
        -Long id
        -String nome
        -Email email
        -CPF cpf
        +criar(String, String, String) : Usuario
        +isValid() : boolean
    }
    
    ' Value Objects
    class Email {
        -String value
        +of(String) : Email
        +getValue() : String
    }
    
    class CPF {
        -String value
        +of(String) : CPF
        +getValue() : String
    }
    
    ' Ports (Interfaces)
    interface UsuarioInboundPort {
        +criarUsuario(String, Email, CPF) : Usuario
        +buscarUsuarioPorId(Long) : Usuario
        +listarTodosUsuarios() : List<Usuario>
        +removerUsuario(Long) : void
    }
    
    interface UsuarioOutboundPort {
        +salvar(Usuario) : Usuario
        +buscarPorId(Long) : Optional<Usuario>
        +buscarTodos() : List<Usuario>
        +deletar(Long) : void
    }
    
    ' Use Case Implementation
    class UsuarioUseCaseImpl {
        -UsuarioOutboundPort usuarioOutboundPort
        +criarUsuario(String, Email, CPF) : Usuario
        +buscarUsuarioPorId(Long) : Usuario
        +listarTodosUsuarios() : List<Usuario>
        +removerUsuario(Long) : void
    }
    
    ' Exceptions
    class UsuarioInvalidoException {
        +UsuarioInvalidoException(String)
    }
    
    class UsuarioNaoEncontradoException {
        +UsuarioNaoEncontradoException(String)
    }
    
    ' Relacionamentos Domain
    Usuario --> Email : contains
    Usuario --> CPF : contains
    UsuarioUseCaseImpl ..|> UsuarioInboundPort : implements
    UsuarioUseCaseImpl --> UsuarioOutboundPort : uses
    UsuarioUseCaseImpl --> Usuario : creates/returns
}

' ==========================================
' DRIVING ADAPTERS (Application)
' ==========================================
package "üåê APPLICATION (Driving Adapters)" as application #E3F2FD {
    
    ' REST Controller
    class UsuarioController {
        -UsuarioCommandService commandService
        -UsuarioQueryService queryService
        +criarUsuario(UsuarioRequest) : ResponseEntity<UsuarioResponse>
        +buscarUsuarioPorId(Long) : ResponseEntity<UsuarioResponse>
        +listarUsuarios() : ResponseEntity<UsuarioResponse[]>
        +removerUsuario(Long) : ResponseEntity<Void>
    }
    
    ' DTOs
    class UsuarioRequest {
        -String nome
        -String email
        -String cpf
    }
    
    class UsuarioResponse {
        -Long id
        -String nome
        -String email
        -String cpf
        -String cpfFormatado
    }
    
    ' Application Services (CQRS)
    class UsuarioCommandService {
        -UsuarioInboundPort usuarioInboundPort
        +criarUsuario(UsuarioRequest) : UsuarioResponse
        +removerUsuario(Long) : void
    }
    
    class UsuarioQueryService {
        -UsuarioJpaRepository usuarioJpaRepository
        +buscarUsuarioPorId(Long) : UsuarioResponse
        +listarUsuarios() : List<UsuarioListResponse>
    }
    
    ' Configuration
    class UseCaseConfiguration {
        +usuarioInboundPort(UsuarioOutboundPort) : UsuarioInboundPort
    }
    
    ' Relacionamentos Application
    UsuarioController --> UsuarioCommandService : Commands
    UsuarioController --> UsuarioQueryService : Queries
    UsuarioCommandService --> UsuarioInboundPort : uses
    UsuarioQueryService --> UsuarioJpaRepository : bypass
    UsuarioCommandService --> UsuarioRequest : receives
    UsuarioCommandService --> UsuarioResponse : returns
}

' ==========================================
' DRIVEN ADAPTERS (Infrastructure)
' ==========================================
package "üíæ INFRASTRUCTURE (Driven Adapters)" as infrastructure #FFF3E0 {
    
    ' JPA Entity
    class UsuarioEntity {
        -Long id
        -String nome
        -String email
        -String cpf
    }
    
    ' JPA Repository
    interface UsuarioJpaRepository {
        +save(UsuarioEntity) : UsuarioEntity
        +findById(Long) : Optional<UsuarioEntity>
        +findAll() : List<UsuarioEntity>
        +deleteById(Long) : void
    }
    
    ' Repository Adapter
    class UsuarioRepositoryAdapter {
        -UsuarioJpaRepository jpaRepository
        +salvar(Usuario) : Usuario
        +buscarPorId(Long) : Optional<Usuario>
        +buscarTodos() : List<Usuario>
        +deletar(Long) : void
        -toEntity(Usuario) : UsuarioEntity
        -toDomain(UsuarioEntity) : Usuario
    }
    
    ' Relacionamentos Infrastructure
    UsuarioRepositoryAdapter ..|> UsuarioOutboundPort : implements
    UsuarioRepositoryAdapter --> UsuarioJpaRepository : uses
    UsuarioRepositoryAdapter --> UsuarioEntity : converts
    UsuarioRepositoryAdapter --> Usuario : converts
}

' ==========================================
' DEPEND√äNCIAS ENTRE M√ìDULOS
' ==========================================
application --> domain : depends on
infrastructure --> domain : depends on
application --> infrastructure : depends on

' ==========================================
' FLUXO CQRS
' ==========================================
UsuarioController --> UsuarioCommandService : "Commands\n(Write Operations)"
UsuarioController --> UsuarioQueryService : "Queries\n(Read Operations)"
UsuarioCommandService --> UsuarioInboundPort : "Domain Logic"
UsuarioQueryService --> UsuarioJpaRepository : "Bypass\n(Direct Access)"

' ==========================================
' CONVERS√ïES DE DADOS
' ==========================================
UsuarioRequest --> Usuario : "converts via\nCommandService"
Usuario --> UsuarioResponse : "converts via\nCommandService"
UsuarioEntity --> Usuario : "converts via\nRepositoryAdapter"
Usuario --> UsuarioEntity : "converts via\nRepositoryAdapter"

' ==========================================
' ANOTA√á√ïES ARQUITETURAIS
' ==========================================
note right of domain : "üéØ DOMAIN\n‚Ä¢ Puro (sem frameworks)\n‚Ä¢ Value Objects (Email, CPF)\n‚Ä¢ Business Logic\n‚Ä¢ Port Interfaces\n‚Ä¢ Exceptions"
note right of application : "üåê APPLICATION\n‚Ä¢ Driving Adapters (Controllers)\n‚Ä¢ Application Services\n‚Ä¢ CQRS Implementation\n‚Ä¢ Spring Configuration\n‚Ä¢ DTOs"
note right of infrastructure : "üíæ INFRASTRUCTURE\n‚Ä¢ Driven Adapters\n‚Ä¢ JPA Entities\n‚Ä¢ Database Access\n‚Ä¢ External Systems\n‚Ä¢ Data Conversion"

' ==========================================
' PRINC√çPIOS ARQUITETURAIS
' ==========================================
note bottom : "üìã PRINC√çPIOS:\n‚Ä¢ üéØ Domain: L√≥gica de neg√≥cio pura, sem depend√™ncias externas\n‚Ä¢ üåê Application: Orquestra Domain e Infrastructure\n‚Ä¢ üíæ Infrastructure: Implementa portas de sa√≠da\n‚Ä¢ üîÑ CQRS: Commands ‚Üí Domain, Queries ‚Üí Bypass\n‚Ä¢ üîå Ports: Interfaces que desacoplam camadas\n‚Ä¢ üé≠ Adapters: Implementam as portas com tecnologias espec√≠ficas"

@enduml
